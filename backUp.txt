"""import os
import subprocess
import threading
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import language_tool_python
from vosk import Model, KaldiRecognizer
import wave
import json
# pip install mysql-connector-python
# ============================
# 📌 Inicializar LanguageTool (Evita múltiples instancias)
# ============================
tool = language_tool_python.LanguageTool('es')

# ============================
# 🔄 Función para corregir texto de forma eficiente
# ============================
def correct_text_handler():
    input_text = text_input.get("1.0", tk.END).strip()
    
    if not input_text:
        messagebox.showwarning("Aviso", "Por favor, ingresa un texto para corregir.")
        return

    # 🔒 Deshabilitar el botón mientras corrige
    button_correct.config(state=tk.DISABLED)
    text_output.delete("1.0", tk.END)
    text_output.insert(tk.END, "Corrigiendo...")

    def process_correction():
        corrected = tool.correct(input_text)
        text_output.delete("1.0", tk.END)
        text_output.insert(tk.END, corrected)
        button_correct.config(state=tk.NORMAL)  # 🔓 Volver a habilitar el botón

    # 🏃 Ejecutar en un hilo separado para no congelar la interfaz
    threading.Thread(target=process_correction, daemon=True).start()

# ============================
# 🎙 Transcripción con Vosk
# ============================
VOSK_MODEL_PATH = "vosk-model-es-0.42"

if not os.path.exists(VOSK_MODEL_PATH):
    messagebox.showerror("Error", "No se encontró el modelo de Vosk. Descárgalo de https://alphacephei.com/vosk/models")
    exit()

model = Model(VOSK_MODEL_PATH)

def convert_audio_to_wav(input_audio):
    output_wav = "temp_audio.wav"
    try:
        subprocess.run(
            ["ffmpeg", "-i", input_audio, "-ar", "16000", "-ac", "1", "-c:a", "pcm_s16le", output_wav],
            check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
        )
        return output_wav
    except subprocess.CalledProcessError:
        messagebox.showerror("Error", "Error al convertir el audio con ffmpeg.")
        return None

def transcribe_audio(audio_path):
    wav_path = convert_audio_to_wav(audio_path)
    if not wav_path:
        return ""

    recognizer = KaldiRecognizer(model, 16000)

    with wave.open(wav_path, "rb") as wf:
        while True:
            data = wf.readframes(4000)
            if len(data) == 0:
                break
            recognizer.AcceptWaveform(data)

    result_json = json.loads(recognizer.FinalResult())
    transcription = result_json.get("text", "").strip()
    
    os.remove(wav_path)  # Eliminar archivo temporal
    return transcription

def select_audio_file():
    file_path = filedialog.askopenfilename(
        title="Seleccionar archivo de audio",
        filetypes=[("Archivos de audio", "*.wav *.m4a *.mp3 *.ogg *.flac")]
    )
    if file_path:
        label_audio_file.config(text=file_path)

def transcribe_audio_handler():
    audio_file = label_audio_file.cget("text")
    if not audio_file or audio_file == "Ningún archivo seleccionado":
        messagebox.showwarning("Aviso", "Debes seleccionar un archivo de audio primero.")
        return

    button_transcribe_audio.config(state=tk.DISABLED)
    text_audio_output.delete("1.0", tk.END)
    text_audio_output.insert(tk.END, "Transcribiendo...")

    def process_transcription():
        transcription = transcribe_audio(audio_file)
        text_audio_output.delete("1.0", tk.END)
        text_audio_output.insert(tk.END, transcription)
        button_transcribe_audio.config(state=tk.NORMAL)

    threading.Thread(target=process_transcription, daemon=True).start()

# ============================
# 🎨 Interfaz Gráfica con Tkinter
# ============================
root = tk.Tk()
root.title("Herramienta IA (Vosk & Corrección de Texto)")
root.geometry("600x500")

notebook = ttk.Notebook(root)
notebook.pack(expand=True, fill="both")

# 📌 Pestaña de Texto
frame_text = ttk.Frame(notebook)
notebook.add(frame_text, text="Texto")

label_text = ttk.Label(frame_text, text="Ingresa el texto:")
label_text.pack(pady=5)

text_input = tk.Text(frame_text, height=10, width=60)
text_input.pack(pady=5)

button_correct = ttk.Button(frame_text, text="Corregir Texto", command=correct_text_handler)
button_correct.pack(pady=5)

label_text_output = ttk.Label(frame_text, text="Texto corregido:")
label_text_output.pack(pady=5)

text_output = tk.Text(frame_text, height=10, width=60)
text_output.pack(pady=5)

# 📌 Pestaña de Audio
frame_audio = ttk.Frame(notebook)
notebook.add(frame_audio, text="Audio")

button_select_audio = ttk.Button(frame_audio, text="Seleccionar Archivo de Audio", command=select_audio_file)
button_select_audio.pack(pady=5)

label_audio_file = ttk.Label(frame_audio, text="Ningún archivo seleccionado", foreground="blue")
label_audio_file.pack(pady=5)

button_transcribe_audio = ttk.Button(frame_audio, text="Transcribir Audio", command=transcribe_audio_handler)
button_transcribe_audio.pack(pady=5)

label_audio_output = ttk.Label(frame_audio, text="Transcripción:")
label_audio_output.pack(pady=5)

text_audio_output = tk.Text(frame_audio, height=10, width=60)
text_audio_output.pack(pady=5)

# Iniciar la aplicación
root.mainloop()
"""